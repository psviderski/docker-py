#!groovy

def imageNameBase = "dockerbuildbot/docker-py"
def imageNamePy2 = "${imageNameBase}:py2-${gitCommit()}"
def imageNamePy3 = "${imageNameBase}:py3-${gitCommit()}"


def buildImage = { ->
  wrappedNode(label: "ubuntu && !zfs", cleanWorkspace: true) {
    stage("build image") {
      checkout(scm)
      docker.build(imageNamePy2, ".")
      docker.build(imageNamePy3, "-f Dockerfile-py3 .")
    }
  }
}

def runTests = { Map settings ->
  def dockerVersion = settings.get("dockerVersion", null)
  def pythonVersion = settings.get("pythonVersion", null)

  if (!pythonVersion) {
    throw new Exception("Need Python version to test, e.g.: `runTests(pythonVersion: 'py2')`")
  }
  if (!dockerVersion) {
    throw new Exception("Need Docker version to test, e.g.: `runTests(pythonVersion: 'py3')`")
  }

  { ->
    wrappedNode(label: "ubuntu && !zfs", cleanWorkspace: true) {
      stage("test python=${pythonVersion} / docker=${dockerVersion}") {
        checkout(scm)
        sh """docker run -d --name dpy-dind-$BUILD_NUMBER -v /tmp --privileged \\
          dockerswarm/dind:${dockerVersion} docker daemon -H tcp://0.0.0.0:2375
        """
        sh """docker run \\
          --name dpy-tests-$BUILD_NUMBER --volumes-from dpy-dind-$BUILD_NUMBER \\
          -e 'DOCKER_HOST=tcp://docker:2375' \\
          --link=dpy-dind-$BUILD_NUMBER:docker \\
          ${imageNameBase}:${pythonVersion}-${gitCommit()} \\
          py.test -rxs tests/integration
        """
      }
    }
  }
}


buildImage()
parallel(
  failFast: true,
  py2_docker_1_13: runTests(pythonVersion: "py2", dockerVersion: "1.13.0-rc3"),
  py3_docker_1_13: runTests(pythonVersion: "py3", dockerVersion: "1.13.0-rc3"),
  py2_docker_1_12: runTests(pythonVersion: "py2", dockerVersion: "1.12.3"),
  py3_docker_1_12: runTests(pythonVersion: "py3", dockerVersion: "1.12.3"),
)
